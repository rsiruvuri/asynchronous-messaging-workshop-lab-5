AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Wild Rydes Asynchronous Messaging Workshop - Lab 5
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    Runtime: python3.6
    Tags:
      project: wild-rydes
      workshop: asynchronous-messaging-workshop
      author: aws

Resources:
  SubmitRideCompletionFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ride-management-microservice/
      Handler: app.lambda_handler
      Environment:
        Variables:
        #  TOPIC_ARN: !Ref RideManagementTopic   
      Policies:
        # - SNSPublishMessagePolicy: # https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
        #     TopicName: !GetAtt RideManagementTopic.TopicName        
      Events:
        WildRydes:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /ride-Management-Service
            Method: post

  # RideManagementTopic:
  #   Type: AWS::SNS::Topic
  #   Properties:
  #     TopicName: RideManagementTopic

  DispatchMicroservice:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dispatch-microservice/
      Handler: app.lambda_handler
      ReservedConcurrentExecutions: 5
      Environment:
        Variables:
          SERVICE_NAME: DispatchMicroservice
          TABLE_NAME: !Ref DispatchTable
          # TOPIC_ARN: !Ref DispatchTopic
      Policies:
        - DynamoDBCrudPolicy: # https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
            TableName: !Ref DispatchTable
        # - SNSPublishMessagePolicy: # https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
        #     TopicName: !GetAtt DispatchTopic.TopicName
    #   - SQSPollerPolicy: # https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
    #       QueueName: !Ref DispatchMicroserviceQueue
    # Events:
    #   DispatchMicroserviceJobQueue:
    #     Type: SQS
    #     Properties:
    #       Queue: !GetAtt DispatchMicroserviceQueue.Arn
    #       BatchSize: 1        

  DispatchTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "RidesDispatch-${AWS::StackName}"
      PrimaryKey:
        Name: id
        Type: String        
    #   Policies:
    #     - SQSPollerPolicy: # https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
    #         QueueName: !Ref DispatchMicroserviceQueue
    # Events:
    #    DispatchMicroserviceJobQueue:
    #      Type: SQS
    #      Properties:
    #        Queue: !GetAtt DispatchMicroserviceQueue.Arn
    #        BatchSize: 1

  InventoryMicroservice:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: inventory-microservice/
      Handler: app.lambda_handler
      ReservedConcurrentExecutions: 5
      Environment:
        Variables:
          SERVICE_NAME: InventoryMicroservice
          TABLE_NAME: !Ref InventoryTable
          # TOPIC_ARN: !Ref InventoryTopic
      Policies:
        - DynamoDBCrudPolicy: # https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
            TableName: !Ref InventoryTable
        # - SNSPublishMessagePolicy: # https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
        #     TopicName: !GetAtt InventoryTopic.TopicName
    #   - SQSPollerPolicy: # https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
    #       QueueName: !Ref InventoryMicroserviceQueue
    # Events:
    #   InventoryMicroserviceJobQueue:
    #     Type: SQS
    #     Properties:
    #       Queue: !GetAtt InventoryMicroserviceQueue.Arn
    #       BatchSize: 1         

  InventoryTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "RidesInventory-${AWS::StackName}"
      PrimaryKey:
        Name: id
        Type: String           
      # Policies:
      #   - SQSPollerPolicy: # https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
      #       QueueName: !Ref InventoryMicroserviceQueue
      # Events:
      #   InventoryMicroserviceJobQueue:
      #     Type: SQS
      #     Properties:
      #       Queue: !GetAtt InventoryMicroserviceQueue.Arn
      #       BatchSize: 1

  # DispatchMicroserviceQueue:
  #   Type: AWS::SQS::Queue

  # DispatchMicroserviceQueuePolicy:
  #     Type: AWS::SQS::QueuePolicy
  #     Properties:
  #       Queues:
  #         - !Ref DispatchMicroserviceQueue
  #       PolicyDocument:
  #         Statement:
  #           Effect: Allow
  #           Principal: '*'
  #           Action: sqs:SendMessage
  #           Resource: '*'
  #           Condition:
  #             ArnEquals:
  #               aws:SourceArn: !Ref RideManagementTopic

  # DispatchMicroserviceQueueToRidesTopicSubscription:
  #     Type: AWS::SNS::Subscription
  #     Properties:
  #       Endpoint: !GetAtt DispatchMicroserviceQueue.Arn
  #       Protocol: sqs
  #       RawMessageDelivery: true
  #       TopicArn: !Ref RideManagementTopic

  # InventoryMicroserviceQueue:
  #   Type: AWS::SQS::Queue

  # InventoryMicroserviceQueuePolicy:
  #     Type: AWS::SQS::QueuePolicy
  #     Properties:
  #       Queues:
  #         - !Ref InventoryMicroserviceQueue
  #       PolicyDocument:
  #         Statement:
  #           Effect: Allow
  #           Principal: '*'
  #           Action: sqs:SendMessage
  #           Resource: '*'
  #           Condition:
  #             ArnEquals:
  #               aws:SourceArn: !Ref RideManagementTopic

  # InventoryMicroserviceQueueToRidesTopicSubscription:
  #     Type: AWS::SNS::Subscription
  #     Properties:
  #       Endpoint: !GetAtt InventoryMicroserviceQueue.Arn
  #       Protocol: sqs
  #       RawMessageDelivery: true
  #       TopicArn: !Ref RideManagementTopic

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  RideManagementServiceApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for rideManagementService function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/ride-Management-Service/"

  SubmitRideCompletionFunction:
    Description: "SubmitRideCompletionFunction Lambda Function ARN"
    Value: !GetAtt SubmitRideCompletionFunction.Arn

  DispatchMicroservice:
    Description: "DispatchMicroservice Lambda Function ARN"
    Value: !GetAtt DispatchMicroservice.Arn

  InventoryMicroservice:
    Description: "InventoryMicroservice Lambda Function ARN"
    Value: !GetAtt InventoryMicroservice.Arn
  
  DispatchTable:
    Description: "RidesDispatch table id"
    Value: !Ref DispatchTable
    
  InventoryTable:
    Description: "RidesInvetory table id"
    Value: !Ref InventoryTable
  # DispatchMicroserviceQueue:
  #   Description: "Amazon SQS queue ARN for the DispatchMicroservice queue"
  #   Value: !Ref DispatchMicroserviceQueue

  # InventoryMicroserviceQueue:
  #   Description: "Amazon SQS queue ARN for the InventoryMicroservice queue"
  #   Value: !Ref InventoryMicroserviceQueue
